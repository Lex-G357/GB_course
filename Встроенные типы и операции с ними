"""
1. Создать список и заполнить его
лементами различных типов данных.
Реализовать скрипт проверки типа
данных каждого элемента. Использовать
функцию type() для проверки типа.
Элементы списка можно не запрашивать
у пользователя, а указать явно, в
программе.
"""

new_list = ["text", 123, 12.5, True, None, '123']
n = 0
while n < len(new_list):
    print(type(new_list[n]))
    n = n + 1
else:
    print()

"""
2. Для списка реализовать обмен значений
соседних элементов, т.е. Значениями обмениваются
элементы с индексами 0 и 1, 2 и 3 и т.д. При
нечетном количестве элементов последний сохранить
на своем месте. Для заполнения списка элементов
необходимо использовать функцию input().
"""

a = [int(i) for i in input("Введите числа через пробел >>> ").split()]
for i in range(1, len(a), 2):
    a[i - 1], a[i] = a[i], a[i - 1]
print(' '.join([str(i) for i in a]))

"""
3. Пользователь вводит месяц в виде
целого числа от 1 до 12. Сообщить к
какому времени года относится месяц
(зима, весна, лето, осень). Напишите
решения через list и через dict.
"""

number = int(input("Введите число от 1 до 12 >>> "))
if 12 < number < 1:
    print("Нужно вводить число от 1 до 12, попробуйте еще раз")
else:
    season = {"Зима": [12, 1, 2],
              "Весна": [3, 4, 5],
              "Лето": [6, 7, 8],
              "Осень": [9, 10, 11]}

    for key in season.keys():
        if number in season[key]:
            print(key)

"""
4. Пользователь вводит строку из нескольких слов,
разделённых пробелами. Вывести каждое слово с
новой строки. Строки необходимо пронумеровать.
Если в слово длинное, выводить только первые 10
букв в слове.
"""
new_str = input("Введите несколько слов через пробел >>> ")

for ind, el in enumerate(new_str.split(" "), 1):
    if len(str(new_str)) <= 10:
        print(ind, el)
    elif len(str(new_str)) > 10:
        print(ind, el[0:10])

"""
5. Реализовать структуру «Рейтинг», представляющую
собой не возрастающий набор натуральных чисел.
У пользователя необходимо запрашивать новый элемент
рейтинга. Если в рейтинге существуют элементы с
одинаковыми значениями, то новый элемент с тем же
значением должен разместиться после них.
Подсказка. Например, набор натуральных чисел:
7, 5, 3, 3, 2.
Пользователь ввел число 3.
Результат: 7, 5, 3, 3, 3, 2.
Пользователь ввел число 8.
Результат: 8, 7, 5, 3, 3, 2.
Пользователь ввел число 1.
Результат: 7, 5, 3, 3, 2, 1.

Набор натуральных чисел можно задать
непосредственно в коде, например,
my_list = [7, 5, 3, 3, 2].
"""

my_list = [7, 5, 3, 3, 2]
number = int(input("Введите новый элемент рейтинга >>> "))
my_list.append(number)
my_list.sort()
my_list.reverse()
print(my_list)
