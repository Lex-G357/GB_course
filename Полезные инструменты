"""
1. Реализовать скрипт, в котором должна быть
предусмотрена функция расчета заработной платы
сотрудника. В расчете необходимо использовать
формулу: (выработка в часах*ставка в час) +
премия. Для выполнения расчета для конкретных
значений необходимо запускать скрипт с параметрами.
"""


def sal():
    hour = int(input("Введите кол-во часов >>> "))
    money = int(input("Введите ставку в час >>> "))
    prize = int(input("Введите размер премии >>> "))
    return hour * money + prize


print(sal())

"""
2. Представлен список чисел. Необходимо вывести
элементы исходного списка, значения которых
больше предыдущего элемента.
Подсказка: элементы, удовлетворяющие условию,
оформить в виде списка. Для формирования списка
использовать генератор.
Пример исходного списка:
[300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
Результат: [12, 44, 4, 10, 78, 123].
"""

my_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
new_list = [el for ch, el in enumerate(my_list) if my_list[ch-1] < my_list[ch]]
print(f"Исходный список: {my_list}")
print(f"Новый список: {new_list}")

"""
3. Для чисел в пределах от 20 до 240
найти числа, кратные 20 или 21.
Необходимо решить задание в одну строку.
Подсказка: использовать функцию range() и генератор.
"""

print(sorted({el for el in range(20, 240) if el % 20 == 0 or el % 21 == 0}))

"""
4. Представлен список чисел. Определить
элементы списка, не имеющие повторений.
Сформировать итоговый массив чисел,
соответствующих требованию. Элементы
вывести в порядке их следования в
исходном списке. Для выполнения
задания обязательно использовать
генератор.
Пример исходного списка:
[2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
Результат: [23, 1, 3, 10, 4, 11]
"""
# from collections import Counter
my_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
new_list = [el for el in my_list if my_list.count(el) < 2]
print(new_list)

"""
5. Реализовать формирование списка,
используя функцию range() и возможности
генератора. В список должны войти
четные числа от 100 до 1000 (включая
границы). Необходимо получить
результат вычисления произведения
всех элементов списка.
Подсказка: использовать функцию reduce().
"""

from functools import reduce


def my_func(a, b):
    return a * b


my_list = [el for el in range(100, 1001) if el % 2 == 0]
print(reduce(my_func, my_list))


"""
6. Реализовать два небольших скрипта:
а) итератор, генерирующий целые числа, начиная с указанного,
б) итератор, повторяющий элементы некоторого списка,
определенного заранее.

Подсказка: использовать функцию count() и
cycle() модуля itertools. Обратите внимание,
что создаваемый цикл не должен быть бесконечным.
Необходимо предусмотреть условие его завершения.

Например, в первом задании выводим целые числа,
начиная с 3, а при достижении числа 10 завершаем
цикл. Во втором также необходимо предусмотреть
условие, при котором повторение элементов
списка будет прекращено.
"""

from itertools import count, cycle

i = int(input("Введите первое целое число >>> "))
i2 = int(input("Введите второе целое число, большее первого >>> "))
for el in count(i):
    if el > i2:
        break
    else:
        print(el)

i3 = input("Введите текст для повтрения >>> ")
i4 = int(input("Введите кол-во повтрений >>> "))
с = 0
for el in cycle(i3):
    if с > i4:
        break
    print(el)
    с += 1

"""
7. Реализовать генератор с помощью функции
с ключевым словом yield, создающим очередное
значение. При вызове функции должен создаваться
объект-генератор. Функция должна вызываться
следующим образом: for el in fact(n). Функция
отвечает за получение факториала числа, а в
цикле необходимо выводить только первые n
чисел, начиная с 1! и до n!.
Подсказка: факториал числа n — произведение
чисел от 1 до n. Например, факториал четырёх
4! = 1 * 2 * 3 * 4 = 24.
"""

n = int(input("Введите целое число >>> "))


def fact(n):
    r = 1

    for i in range(1, n + 1):
        r *= i
        yield r


for el in fact(n):
    print(el)


